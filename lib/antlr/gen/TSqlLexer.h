
// Generated from TSqlLexer.g4 by ANTLR 4.9.2

#pragma once


#include "antlr4-runtime.h"




class  TSqlLexer : public antlr4::Lexer {
public:
  enum {
    ABS = 1, ASCII = 2, CEILING = 3, CHAR = 4, CHARINDEX = 5, DATALENGTH = 6, 
    DAY = 7, FLOOR = 8, ISDATE = 9, ISNUMERIC = 10, LEN = 11, LOWER = 12, 
    LTRIM = 13, MONTH = 14, NCHAR = 15, PATINDEX = 16, RAND = 17, REPLACE = 18, 
    ROUND = 19, RTRIM = 20, SIGN = 21, SPACE_fn = 22, STR = 23, SUBSTRING = 24, 
    UPPER = 25, USER_NAME = 26, YEAR = 27, TEXT = 28, NTEXT = 29, ADD = 30, 
    ALL = 31, ALTER = 32, AND = 33, ANY = 34, AS = 35, ASC = 36, AUTHORIZATION = 37, 
    BACKSLASH = 38, BEGIN = 39, BETWEEN = 40, BREAK = 41, BY = 42, CASE = 43, 
    CHECK = 44, CLOSE = 45, COALESCE = 46, COLLATE = 47, COLUMN = 48, COMMIT = 49, 
    COMPUTE = 50, CONSTRAINT = 51, CONTINUE = 52, CONVERT = 53, CREATE = 54, 
    CROSS = 55, CURRENT = 56, CURRENT_DATE = 57, CURRENT_TIME = 58, CURRENT_TIMESTAMP = 59, 
    CURRENT_USER = 60, CURSOR = 61, DATABASE = 62, DBCC = 63, DEALLOCATE = 64, 
    DECLARE = 65, DEFAULT = 66, DELETE = 67, DESC = 68, DISTINCT = 69, DISTRIBUTED = 70, 
    DOUBLE = 71, DOUBLE_BACK_SLASH = 72, DOUBLE_FORWARD_SLASH = 73, DROP = 74, 
    ELSE = 75, END = 76, ESCAPE = 77, EXCEPT = 78, EXECUTE = 79, EXISTS = 80, 
    FETCH = 81, FOR = 82, FOREIGN = 83, FROM = 84, FULL = 85, FUNCTION = 86, 
    GOTO = 87, GROUP = 88, HAVING = 89, HOLDLOCK = 90, IDENTITY = 91, IDENTITY_INSERT = 92, 
    IF = 93, IN = 94, INDEX = 95, INNER = 96, INSERT = 97, INTERSECT = 98, 
    INTO = 99, IS = 100, JOIN = 101, KEY = 102, KILL = 103, LEFT = 104, 
    LIKE = 105, MERGE = 106, NOT = 107, NULL_ = 108, NULLIF = 109, OF = 110, 
    OFF = 111, ON = 112, OPEN = 113, OPTION = 114, OR = 115, ORDER = 116, 
    OUTER = 117, OVER = 118, PERCENT = 119, PIVOT = 120, PLAN = 121, PRECISION = 122, 
    PRIMARY = 123, PRINT = 124, PROC = 125, PROCEDURE = 126, RAISERROR = 127, 
    READ = 128, REFERENCES = 129, REPLICATION = 130, RETURN = 131, REVERT = 132, 
    RIGHT = 133, ROLLBACK = 134, ROWCOUNT = 135, ROWGUIDCOL = 136, SAVE = 137, 
    SCHEMA = 138, SELECT = 139, SESSION_USER = 140, SET = 141, SHUTDOWN = 142, 
    SOME = 143, SYSTEM_USER = 144, TABLE = 145, THEN = 146, TO = 147, TOP = 148, 
    TRAN = 149, TRANSACTION = 150, TRUNCATE = 151, UNION = 152, UNIQUE = 153, 
    UNPIVOT = 154, UPDATE = 155, USE = 156, USER = 157, VALUES = 158, VARYING = 159, 
    WHEN = 160, WHERE = 161, WHILE = 162, WITH = 163, WITHIN = 164, DOLLAR_PARTITION = 165, 
    ABSOLUTE = 166, AT_KEYWORD = 167, ACTION = 168, AES_128 = 169, AES_192 = 170, 
    AES_256 = 171, ALGORITHM = 172, ANSI_NULLS = 173, ANSI_PADDING = 174, 
    ANSI_WARNINGS = 175, APPLY = 176, ARITHABORT = 177, AUTO = 178, AVG = 179, 
    BIGINT = 180, BINARY_KEYWORD = 181, BINARY_BASE64 = 182, BINARY_CHECKSUM = 183, 
    CALLER = 184, CAST = 185, TRY_CAST = 186, CATCH = 187, CHECKSUM = 188, 
    CHECKSUM_AGG = 189, COMMITTED = 190, CONCAT = 191, CONCAT_NULL_YIELDS_NULL = 192, 
    COUNT = 193, COUNT_BIG = 194, CUME_DIST = 195, CURSOR_CLOSE_ON_COMMIT = 196, 
    CURSOR_DEFAULT = 197, DATA = 198, DATEADD = 199, DATEDIFF = 200, DATENAME = 201, 
    DATEPART = 202, DAYS = 203, DEFAULT_DOUBLE_QUOTE = 204, DELAYED_DURABILITY = 205, 
    DELETED = 206, DENSE_RANK = 207, DES = 208, DESCRIPTION = 209, DESX = 210, 
    DISABLE = 211, DYNAMIC = 212, ELEMENTS = 213, EMPTY = 214, ENCRYPTION = 215, 
    EXCLUSIVE = 216, FAST = 217, FAST_FORWARD = 218, FIRST = 219, FIRST_VALUE = 220, 
    FOLLOWING = 221, FORCE = 222, FORCED = 223, FORWARD_ONLY = 224, GETDATE = 225, 
    GETUTCDATE = 226, GLOBAL = 227, GO_BATCH = 228, GO = 229, GROUPING = 230, 
    GROUPING_ID = 231, HASH = 232, HIGH = 233, HOURS = 234, IDENTITY_VALUE = 235, 
    INCLUDE_NULL_VALUES = 236, INPUT = 237, INSENSITIVE = 238, INSERTED = 239, 
    INT = 240, ISOLATION = 241, KEEP = 242, KEEPFIXED = 243, KEYSET = 244, 
    LAG = 245, LAST = 246, LAST_VALUE = 247, LEAD = 248, LEVEL = 249, LOCAL = 250, 
    LOCATION = 251, LOCK = 252, LOCK_ESCALATION = 253, LOOP = 254, LOW = 255, 
    MANUAL = 256, MARK = 257, MAX = 258, MAXDOP = 259, MAXRECURSION = 260, 
    MIN = 261, MIN_ACTIVE_ROWVERSION = 262, MINUTES = 263, MODE = 264, NEXT = 265, 
    NO = 266, NOCOUNT = 267, NODES = 268, NOEXPAND = 269, NOWAIT = 270, 
    NTILE = 271, NUMANODE = 272, NUMERIC_ROUNDABORT = 273, OBJECT = 274, 
    OFFSET = 275, ONLINE = 276, ONLY = 277, OPTIMISTIC = 278, OPTIMIZE = 279, 
    OUT = 280, OUTPUT = 281, OWNER = 282, PARAMETERIZATION = 283, PARTITION = 284, 
    PARTITIONS = 285, PERCENT_RANK = 286, PERCENTILE_CONT = 287, PERCENTILE_DISC = 288, 
    PRECEDING = 289, PRIOR = 290, QUERY = 291, QUOTED_IDENTIFIER = 292, 
    RANGE = 293, RANK = 294, RC2 = 295, RC4 = 296, RC4_128 = 297, READ_ONLY = 298, 
    READONLY = 299, REBUILD = 300, RECOMPILE = 301, RELATIVE = 302, REMOTE = 303, 
    REPEATABLE = 304, ROBUST = 305, ROW = 306, ROW_NUMBER = 307, ROWGUID = 308, 
    ROWS = 309, SCHEMABINDING = 310, SCROLL = 311, SCROLL_LOCKS = 312, SECONDS = 313, 
    SELF = 314, SEMI_SENSITIVE = 315, SEQUENCE = 316, SERIALIZABLE = 317, 
    SETERROR = 318, SHARE = 319, SIMPLE = 320, SIZE = 321, SMALLINT = 322, 
    SNAPSHOT = 323, SPATIAL_WINDOW_MAX_CELLS = 324, STATIC = 325, STATUSONLY = 326, 
    STDEV = 327, STDEVP = 328, STRING_AGG = 329, STUFF = 330, SUBSCRIPTION = 331, 
    SUM = 332, TEXTIMAGE_ON = 333, THROW = 334, TIES = 335, TIME = 336, 
    TINYINT = 337, TRIPLE_DES = 338, TRIPLE_DES_3KEY = 339, TRY = 340, TWO_DIGIT_YEAR_CUTOFF = 341, 
    TYPE = 342, TYPE_WARNING = 343, UNBOUNDED = 344, UNCOMMITTED = 345, 
    UNKNOWN = 346, UOW = 347, USING = 348, VAR = 349, VARBINARY_KEYWORD = 350, 
    VARP = 351, WAIT = 352, WORK = 353, ZONE = 354, DOLLAR_ACTION = 355, 
    BLOCKING_HIERARCHY = 356, CACHE = 357, CALLED = 358, CHANGETABLE = 359, 
    CHANGES = 360, CONNECTION = 361, CONTRACT = 362, CYCLE = 363, DATA_COMPRESSION = 364, 
    DDL = 365, ERROR = 366, EVENT = 367, FORCESEEK = 368, IIF = 369, INCREMENT = 370, 
    ISNULL = 371, LOG = 372, MATCHED = 373, MAXVALUE = 374, MINVALUE = 375, 
    NOTIFICATION = 376, PERSISTED = 377, PREDICATE = 378, RESTART = 379, 
    RETURNS = 380, SHRINKLOG = 381, SOURCE = 382, SQL = 383, STATE = 384, 
    START = 385, TARGET = 386, WITHOUT = 387, VARCHAR = 388, NVARCHAR = 389, 
    SPACE = 390, COMMENT = 391, LINE_COMMENT = 392, DOUBLE_QUOTE_ID = 393, 
    SINGLE_QUOTE = 394, SQUARE_BRACKET_ID = 395, LOCAL_ID = 396, DECIMAL = 397, 
    ID = 398, STRING = 399, BINARY = 400, FLOAT = 401, REAL = 402, EQUAL = 403, 
    GREATER = 404, LESS = 405, EXCLAMATION = 406, PLUS_ASSIGN = 407, MINUS_ASSIGN = 408, 
    MULT_ASSIGN = 409, DIV_ASSIGN = 410, MOD_ASSIGN = 411, AND_ASSIGN = 412, 
    XOR_ASSIGN = 413, OR_ASSIGN = 414, DOUBLE_BAR = 415, DOT = 416, UNDERLINE = 417, 
    AT = 418, SHARP = 419, DOLLAR = 420, LR_BRACKET = 421, RR_BRACKET = 422, 
    COMMA = 423, SEMI = 424, COLON = 425, DOUBLE_COLON = 426, STAR = 427, 
    DIVIDE = 428, MODULE = 429, PLUS = 430, MINUS = 431, BIT_NOT = 432, 
    BIT_OR = 433, BIT_AND = 434, BIT_XOR = 435
  };

  explicit TSqlLexer(antlr4::CharStream *input);
  ~TSqlLexer();

  virtual std::string getGrammarFileName() const override;
  virtual const std::vector<std::string>& getRuleNames() const override;

  virtual const std::vector<std::string>& getChannelNames() const override;
  virtual const std::vector<std::string>& getModeNames() const override;
  virtual const std::vector<std::string>& getTokenNames() const override; // deprecated, use vocabulary instead
  virtual antlr4::dfa::Vocabulary& getVocabulary() const override;

  virtual const std::vector<uint16_t> getSerializedATN() const override;
  virtual const antlr4::atn::ATN& getATN() const override;

private:
  static std::vector<antlr4::dfa::DFA> _decisionToDFA;
  static antlr4::atn::PredictionContextCache _sharedContextCache;
  static std::vector<std::string> _ruleNames;
  static std::vector<std::string> _tokenNames;
  static std::vector<std::string> _channelNames;
  static std::vector<std::string> _modeNames;

  static std::vector<std::string> _literalNames;
  static std::vector<std::string> _symbolicNames;
  static antlr4::dfa::Vocabulary _vocabulary;
  static antlr4::atn::ATN _atn;
  static std::vector<uint16_t> _serializedATN;


  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

  struct Initializer {
    Initializer();
  };
  static Initializer _init;
};

