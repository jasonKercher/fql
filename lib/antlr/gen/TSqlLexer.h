
// Generated from TSqlLexer.g4 by ANTLR 4.9.1

#pragma once


#include "antlr4-runtime.h"




class  TSqlLexer : public antlr4::Lexer {
public:
  enum {
    ABS = 1, ASCII = 2, CEILING = 3, CHAR = 4, CHARINDEX = 5, DATALENGTH = 6, 
    DAY = 7, FLOOR = 8, ISDATE = 9, ISNUMERIC = 10, LEN = 11, LOWER = 12, 
    LTRIM = 13, MONTH = 14, NCHAR = 15, PATINDEX = 16, RAND = 17, REPLACE = 18, 
    ROUND = 19, RTRIM = 20, SIGN = 21, SPACE_fn = 22, STR = 23, SUBSTRING = 24, 
    UPPER = 25, USER_NAME = 26, YEAR = 27, TEXT = 28, NTEXT = 29, ADD = 30, 
    ALL = 31, ALTER = 32, AND = 33, ANY = 34, AS = 35, ASC = 36, AUTHORIZATION = 37, 
    BACKSLASH = 38, BEGIN = 39, BETWEEN = 40, BREAK = 41, BY = 42, CASE = 43, 
    CHECK = 44, CLOSE = 45, COALESCE = 46, COLLATE = 47, COLUMN = 48, COMMIT = 49, 
    COMPUTE = 50, CONSTRAINT = 51, CONTINUE = 52, CONVERT = 53, CREATE = 54, 
    CROSS = 55, CURRENT = 56, CURRENT_DATE = 57, CURRENT_TIME = 58, CURRENT_TIMESTAMP = 59, 
    CURRENT_USER = 60, CURSOR = 61, DATABASE = 62, DBCC = 63, DEALLOCATE = 64, 
    DECLARE = 65, DEFAULT = 66, DELETE = 67, DESC = 68, DISTINCT = 69, DISTRIBUTED = 70, 
    DOUBLE = 71, DOUBLE_BACK_SLASH = 72, DOUBLE_FORWARD_SLASH = 73, DROP = 74, 
    ELSE = 75, END = 76, ESCAPE = 77, EXCEPT = 78, EXECUTE = 79, EXISTS = 80, 
    FETCH = 81, FOR = 82, FOREIGN = 83, FROM = 84, FULL = 85, FUNCTION = 86, 
    GOTO = 87, GROUP = 88, HAVING = 89, HOLDLOCK = 90, IDENTITY = 91, IDENTITY_INSERT = 92, 
    IF = 93, IN = 94, INDEX = 95, INNER = 96, INSERT = 97, INTERSECT = 98, 
    INTO = 99, IS = 100, JOIN = 101, KEY = 102, KILL = 103, LEFT = 104, 
    LIKE = 105, MERGE = 106, NOT = 107, NULL_ = 108, NULLIF = 109, OF = 110, 
    OFF = 111, ON = 112, OPEN = 113, OPTION = 114, OR = 115, ORDER = 116, 
    OUTER = 117, OVER = 118, PERCENT = 119, PIVOT = 120, PLAN = 121, PRECISION = 122, 
    PRIMARY = 123, PRINT = 124, PROC = 125, PROCEDURE = 126, RAISERROR = 127, 
    READ = 128, REFERENCES = 129, REPLICATION = 130, RETURN = 131, REVERT = 132, 
    RIGHT = 133, ROLLBACK = 134, ROWCOUNT = 135, ROWGUIDCOL = 136, SAVE = 137, 
    SCHEMA = 138, SELECT = 139, SESSION_USER = 140, SET = 141, SHUTDOWN = 142, 
    SOME = 143, SYSTEM_USER = 144, TABLE = 145, THEN = 146, TO = 147, TOP = 148, 
    TRAN = 149, TRANSACTION = 150, TRUNCATE = 151, UNION = 152, UNIQUE = 153, 
    UNPIVOT = 154, UPDATE = 155, USE = 156, USER = 157, VALUES = 158, VARYING = 159, 
    WHEN = 160, WHERE = 161, WHILE = 162, WITH = 163, WITHIN = 164, DOLLAR_PARTITION = 165, 
    ABSOLUTE = 166, AT_KEYWORD = 167, ACTION = 168, AES_128 = 169, AES_192 = 170, 
    AES_256 = 171, ALGORITHM = 172, ANSI_NULLS = 173, ANSI_PADDING = 174, 
    ANSI_WARNINGS = 175, APPLY = 176, ARITHABORT = 177, AUTO = 178, AVG = 179, 
    BIGINT = 180, BINARY_KEYWORD = 181, BINARY_BASE64 = 182, BINARY_CHECKSUM = 183, 
    CALLER = 184, CAST = 185, TRY_CAST = 186, CATCH = 187, CHECKSUM = 188, 
    CHECKSUM_AGG = 189, COMMITTED = 190, CONCAT = 191, CONCAT_NULL_YIELDS_NULL = 192, 
    COUNT = 193, COUNT_BIG = 194, CUME_DIST = 195, CURSOR_CLOSE_ON_COMMIT = 196, 
    CURSOR_DEFAULT = 197, DATA = 198, DATEADD = 199, DATEDIFF = 200, DATENAME = 201, 
    DATEPART = 202, DAYS = 203, DEFAULT_DOUBLE_QUOTE = 204, DELAY = 205, 
    DELAYED_DURABILITY = 206, DELETED = 207, DENSE_RANK = 208, DES = 209, 
    DESCRIPTION = 210, DESX = 211, DISABLE = 212, DYNAMIC = 213, ELEMENTS = 214, 
    EMPTY = 215, ENCRYPTION = 216, EXCLUSIVE = 217, FAST = 218, FAST_FORWARD = 219, 
    FIRST = 220, FIRST_VALUE = 221, FOLLOWING = 222, FORCE = 223, FORCED = 224, 
    FORWARD_ONLY = 225, GETDATE = 226, GETUTCDATE = 227, GLOBAL = 228, GO_BATCH = 229, 
    GO = 230, GROUPING = 231, GROUPING_ID = 232, HASH = 233, HIGH = 234, 
    HOURS = 235, IDENTITY_VALUE = 236, INCLUDE_NULL_VALUES = 237, INPUT = 238, 
    INSENSITIVE = 239, INSERTED = 240, INT = 241, ISOLATION = 242, KEEP = 243, 
    KEEPFIXED = 244, KEYSET = 245, LAG = 246, LAST = 247, LAST_VALUE = 248, 
    LEAD = 249, LEVEL = 250, LOCAL = 251, LOCATION = 252, LOCK = 253, LOCK_ESCALATION = 254, 
    LOOP = 255, LOW = 256, MANUAL = 257, MARK = 258, MAX = 259, MAXDOP = 260, 
    MAXRECURSION = 261, MIN = 262, MIN_ACTIVE_ROWVERSION = 263, MINUTES = 264, 
    MODE = 265, NEXT = 266, NO = 267, NOCOUNT = 268, NODES = 269, NOEXPAND = 270, 
    NOWAIT = 271, NTILE = 272, NUMANODE = 273, NUMERIC_ROUNDABORT = 274, 
    OBJECT = 275, OFFSET = 276, ONLINE = 277, ONLY = 278, OPTIMISTIC = 279, 
    OPTIMIZE = 280, OUT = 281, OUTPUT = 282, OWNER = 283, PARAMETERIZATION = 284, 
    PARTITION = 285, PARTITIONS = 286, PERCENT_RANK = 287, PERCENTILE_CONT = 288, 
    PERCENTILE_DISC = 289, PRECEDING = 290, PRIOR = 291, QUERY = 292, QUOTED_IDENTIFIER = 293, 
    RANGE = 294, RANK = 295, RC2 = 296, RC4 = 297, RC4_128 = 298, READ_ONLY = 299, 
    READONLY = 300, REBUILD = 301, RECOMPILE = 302, RELATIVE = 303, REMOTE = 304, 
    REPEATABLE = 305, ROBUST = 306, ROW = 307, ROW_NUMBER = 308, ROWGUID = 309, 
    ROWS = 310, SCHEMABINDING = 311, SCROLL = 312, SCROLL_LOCKS = 313, SECONDS = 314, 
    SELF = 315, SEMI_SENSITIVE = 316, SEQUENCE = 317, SERIALIZABLE = 318, 
    SETERROR = 319, SHARE = 320, SIMPLE = 321, SIZE = 322, SMALLINT = 323, 
    SNAPSHOT = 324, SPATIAL_WINDOW_MAX_CELLS = 325, STATIC = 326, STATUSONLY = 327, 
    STDEV = 328, STDEVP = 329, STRING_AGG = 330, STUFF = 331, SUBSCRIPTION = 332, 
    SUM = 333, TEXTIMAGE_ON = 334, THROW = 335, TIES = 336, TIME = 337, 
    TIMEOUT = 338, TINYINT = 339, TRIPLE_DES = 340, TRIPLE_DES_3KEY = 341, 
    TRY = 342, TWO_DIGIT_YEAR_CUTOFF = 343, TYPE = 344, TYPE_WARNING = 345, 
    UNBOUNDED = 346, UNCOMMITTED = 347, UNKNOWN = 348, UOW = 349, USING = 350, 
    VAR = 351, VARBINARY_KEYWORD = 352, VARP = 353, WAIT = 354, WAITFOR = 355, 
    WORK = 356, ZONE = 357, DOLLAR_ACTION = 358, BLOCKING_HIERARCHY = 359, 
    CACHE = 360, CALLED = 361, CHANGETABLE = 362, CHANGES = 363, CONNECTION = 364, 
    CONTRACT = 365, CYCLE = 366, DATA_COMPRESSION = 367, DDL = 368, ERROR = 369, 
    EVENT = 370, FORCESEEK = 371, IIF = 372, INCREMENT = 373, ISNULL = 374, 
    LOG = 375, MATCHED = 376, MAXVALUE = 377, MINVALUE = 378, NOTIFICATION = 379, 
    PERSISTED = 380, PREDICATE = 381, RESTART = 382, RETURNS = 383, SHRINKLOG = 384, 
    SOURCE = 385, SQL = 386, STATE = 387, START = 388, TARGET = 389, WITHOUT = 390, 
    VARCHAR = 391, NVARCHAR = 392, SPACE = 393, COMMENT = 394, LINE_COMMENT = 395, 
    DOUBLE_QUOTE_ID = 396, SINGLE_QUOTE = 397, SQUARE_BRACKET_ID = 398, 
    LOCAL_ID = 399, DECIMAL = 400, ID = 401, STRING = 402, BINARY = 403, 
    FLOAT = 404, REAL = 405, EQUAL = 406, GREATER = 407, LESS = 408, EXCLAMATION = 409, 
    PLUS_ASSIGN = 410, MINUS_ASSIGN = 411, MULT_ASSIGN = 412, DIV_ASSIGN = 413, 
    MOD_ASSIGN = 414, AND_ASSIGN = 415, XOR_ASSIGN = 416, OR_ASSIGN = 417, 
    DOUBLE_BAR = 418, DOT = 419, UNDERLINE = 420, AT = 421, SHARP = 422, 
    DOLLAR = 423, LR_BRACKET = 424, RR_BRACKET = 425, COMMA = 426, SEMI = 427, 
    COLON = 428, DOUBLE_COLON = 429, STAR = 430, DIVIDE = 431, MODULE = 432, 
    PLUS = 433, MINUS = 434, BIT_NOT = 435, BIT_OR = 436, BIT_AND = 437, 
    BIT_XOR = 438
  };

  explicit TSqlLexer(antlr4::CharStream *input);
  ~TSqlLexer();

  virtual std::string getGrammarFileName() const override;
  virtual const std::vector<std::string>& getRuleNames() const override;

  virtual const std::vector<std::string>& getChannelNames() const override;
  virtual const std::vector<std::string>& getModeNames() const override;
  virtual const std::vector<std::string>& getTokenNames() const override; // deprecated, use vocabulary instead
  virtual antlr4::dfa::Vocabulary& getVocabulary() const override;

  virtual const std::vector<uint16_t> getSerializedATN() const override;
  virtual const antlr4::atn::ATN& getATN() const override;

private:
  static std::vector<antlr4::dfa::DFA> _decisionToDFA;
  static antlr4::atn::PredictionContextCache _sharedContextCache;
  static std::vector<std::string> _ruleNames;
  static std::vector<std::string> _tokenNames;
  static std::vector<std::string> _channelNames;
  static std::vector<std::string> _modeNames;

  static std::vector<std::string> _literalNames;
  static std::vector<std::string> _symbolicNames;
  static antlr4::dfa::Vocabulary _vocabulary;
  static antlr4::atn::ATN _atn;
  static std::vector<uint16_t> _serializedATN;


  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

  struct Initializer {
    Initializer();
  };
  static Initializer _init;
};

