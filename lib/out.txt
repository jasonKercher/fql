==317== Memcheck, a memory error detector
==317== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==317== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==317== Command: fql -v
==317== 
ENTER: tsql_file : select*fromfuck<EOF>
ENTER: batch : select*fromfuck
ENTER: sql_clauses : select*fromfuck
ENTER: sql_clause : select*fromfuck
==317== Conditional jump or move depends on uninitialised value(s)
==317==    at 0x4DD6CB0: stack_push (stack.c:14)
==317==    by 0x4B1EA87: ListenerInterface::enterSql_clause(TSqlParser::Sql_clauseContext*) (listenerinterface.cpp:129)
==317==    by 0x4B7814D: TSqlParser::Sql_clauseContext::enterRule(antlr4::tree::ParseTreeListener*) (TSqlParser.cpp:870)
==317==    by 0x52E2CEF: antlr4::tree::IterativeParseTreeWalker::walk(antlr4::tree::ParseTreeListener*, antlr4::tree::ParseTree*) const (in /usr/local/lib/libantlr4-runtime.so.4.8)
==317==    by 0x4B39050: analyze_query (antlr.cpp:40)
==317==    by 0x4B1D989: fql_exec (lib.c:60)
==317==    by 0x109354: main (fql.c:104)
==317== 
ENTER: dml_clause : select*fromfuck
ENTER: select_statement : select*fromfuck
ENTER: query_expression : select*fromfuck
ENTER: query_specification : select*fromfuck
ENTER: select_list : *
ENTER: select_list_elem : *
ENTER: asterisk : *
EXIT:  asterisk : *
EXIT:  select_list_elem : *
EXIT:  select_list : *
ENTER: table_sources : fuck
ENTER: table_source : fuck
ENTER: table_source_item_joined : fuck
ENTER: table_source_item : fuck
==317== Conditional jump or move depends on uninitialised value(s)
==317==    at 0x4DD6CE4: stack_remove (stack.c:31)
==317==    by 0x4B1DA40: query_add_source (query.c:41)
==317==    by 0x4B1E665: ListenerInterface::enterTable_source_item(TSqlParser::Table_source_itemContext*) (listenerinterface.cpp:57)
==317==    by 0x4C9B965: TSqlParser::Table_source_itemContext::enterRule(antlr4::tree::ParseTreeListener*) (TSqlParser.cpp:97387)
==317==    by 0x52E2CEF: antlr4::tree::IterativeParseTreeWalker::walk(antlr4::tree::ParseTreeListener*, antlr4::tree::ParseTree*) const (in /usr/local/lib/libantlr4-runtime.so.4.8)
==317==    by 0x4B39050: analyze_query (antlr.cpp:40)
==317==    by 0x4B1D989: fql_exec (lib.c:60)
==317==    by 0x109354: main (fql.c:104)
==317== 
==317== Use of uninitialised value of size 8
==317==    at 0x4DD6CE6: stack_remove (stack.c:34)
==317==    by 0x4B1DA40: query_add_source (query.c:41)
==317==    by 0x4B1E665: ListenerInterface::enterTable_source_item(TSqlParser::Table_source_itemContext*) (listenerinterface.cpp:57)
==317==    by 0x4C9B965: TSqlParser::Table_source_itemContext::enterRule(antlr4::tree::ParseTreeListener*) (TSqlParser.cpp:97387)
==317==    by 0x52E2CEF: antlr4::tree::IterativeParseTreeWalker::walk(antlr4::tree::ParseTreeListener*, antlr4::tree::ParseTree*) const (in /usr/local/lib/libantlr4-runtime.so.4.8)
==317==    by 0x4B39050: analyze_query (antlr.cpp:40)
==317==    by 0x4B1D989: fql_exec (lib.c:60)
==317==    by 0x109354: main (fql.c:104)
==317== 
==317== Invalid read of size 8
==317==    at 0x4DD6CE6: stack_remove (stack.c:34)
==317==    by 0x4B1DA40: query_add_source (query.c:41)
==317==    by 0x4B1E665: ListenerInterface::enterTable_source_item(TSqlParser::Table_source_itemContext*) (listenerinterface.cpp:57)
==317==    by 0x4C9B965: TSqlParser::Table_source_itemContext::enterRule(antlr4::tree::ParseTreeListener*) (TSqlParser.cpp:97387)
==317==    by 0x52E2CEF: antlr4::tree::IterativeParseTreeWalker::walk(antlr4::tree::ParseTreeListener*, antlr4::tree::ParseTree*) const (in /usr/local/lib/libantlr4-runtime.so.4.8)
==317==    by 0x4B39050: analyze_query (antlr.cpp:40)
==317==    by 0x4B1D989: fql_exec (lib.c:60)
==317==    by 0x109354: main (fql.c:104)
==317==  Address 0xffffffffffffff50 is not stack'd, malloc'd or (recently) free'd
==317== 
==317== 
==317== Process terminating with default action of signal 11 (SIGSEGV)
==317==  Access not within mapped region at address 0xFFFFFFFFFFFFFF50
==317==    at 0x4DD6CE6: stack_remove (stack.c:34)
==317==    by 0x4B1DA40: query_add_source (query.c:41)
==317==    by 0x4B1E665: ListenerInterface::enterTable_source_item(TSqlParser::Table_source_itemContext*) (listenerinterface.cpp:57)
==317==    by 0x4C9B965: TSqlParser::Table_source_itemContext::enterRule(antlr4::tree::ParseTreeListener*) (TSqlParser.cpp:97387)
==317==    by 0x52E2CEF: antlr4::tree::IterativeParseTreeWalker::walk(antlr4::tree::ParseTreeListener*, antlr4::tree::ParseTree*) const (in /usr/local/lib/libantlr4-runtime.so.4.8)
==317==    by 0x4B39050: analyze_query (antlr.cpp:40)
==317==    by 0x4B1D989: fql_exec (lib.c:60)
==317==    by 0x109354: main (fql.c:104)
==317==  If you believe this happened as a result of a stack
==317==  overflow in your program's main thread (unlikely but
==317==  possible), you can try to increase the size of the
==317==  main thread stack using the --main-stacksize= flag.
==317==  The main thread stack size used in this run was 8388608.
==317== 
==317== HEAP SUMMARY:
==317==     in use at exit: 5,622,855 bytes in 81,207 blocks
==317==   total heap usage: 527,846 allocs, 446,639 frees, 37,687,491 bytes allocated
==317== 
==317== 24 bytes in 1 blocks are definitely lost in loss record 188 of 867
==317==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==317==    by 0x4DD6C95: stack_push (stack.c:7)
==317==    by 0x4B1EA87: ListenerInterface::enterSql_clause(TSqlParser::Sql_clauseContext*) (listenerinterface.cpp:129)
==317==    by 0x4B7814D: TSqlParser::Sql_clauseContext::enterRule(antlr4::tree::ParseTreeListener*) (TSqlParser.cpp:870)
==317==    by 0x52E2CEF: antlr4::tree::IterativeParseTreeWalker::walk(antlr4::tree::ParseTreeListener*, antlr4::tree::ParseTree*) const (in /usr/local/lib/libantlr4-runtime.so.4.8)
==317==    by 0x4B39050: analyze_query (antlr.cpp:40)
==317==    by 0x4B1D989: fql_exec (lib.c:60)
==317==    by 0x109354: main (fql.c:104)
==317== 
==317== LEAK SUMMARY:
==317==    definitely lost: 24 bytes in 1 blocks
==317==    indirectly lost: 0 bytes in 0 blocks
==317==      possibly lost: 0 bytes in 0 blocks
==317==    still reachable: 5,622,831 bytes in 81,206 blocks
==317==                       of which reachable via heuristic:
==317==                         multipleinheritance: 280 bytes in 5 blocks
==317==         suppressed: 0 bytes in 0 blocks
==317== Reachable blocks (those to which a pointer was found) are not shown.
==317== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==317== 
==317== For counts of detected and suppressed errors, rerun with: -v
==317== Use --track-origins=yes to see where uninitialised values come from
==317== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
